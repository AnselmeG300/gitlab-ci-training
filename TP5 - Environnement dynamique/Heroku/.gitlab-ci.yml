image: docker:latest
services:
  - name: docker:dind
    alias: docker


stages:
  - build
  - Test acceptation
  - Release image
  - Deploy review
  - Stop review
  - Deploy staging
  - Deploy prod

docker-build:
  # Use the official docker image.
  stage: build
  script:
    - docker build -t  alpinehelloworld .
    - docker save alpinehelloworld > alpinehelloworld.tar
  artifacts:
    paths:
      - alpinehelloworld.tar    


test acceptation:
  # Official docker image.
  stage: Test acceptation
  script:
    - docker load < alpinehelloworld.tar
    - docker run -d -p 80:5000 -e PORT=5000 --name webapp alpinehelloworld
    - sleep 5
    - apk --no-cache add curl
    - curl "http://docker" | grep  "Hello world!"

release image:
  stage: Release image
  script:
    - docker load < alpinehelloworld.tar
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker tag alpinehelloworld "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker push "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker push "${IMAGE_NAME}:${CI_COMMIT_SHORT_SHA}"


deploy staging:
  stage: Deploy staging
  environment:
    name: staging
    url: https://${HOSTNAME_DEPLOY_STAGING}
  variables:
    HEROKU_APP: eazytraining-staging-gitlab
  only:
    - master
  script:
    - apk --no-cache add npm
    - npm install -g heroku@9.3.0
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker tag "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}" registry.heroku.com/${HEROKU_APP}/web
    - heroku container:login
    - docker push registry.heroku.com/${HEROKU_APP}/web
    - heroku stack:set container -a ${HEROKU_APP}
    - heroku container:release web -a ${HEROKU_APP}


deploy prod:
  stage: Deploy prod
  environment:
    name: prod
    url: https://${HOSTNAME_DEPLOY_PROD} # eg: url_a_recuperer_sur_heroku
  variables:
    HEROKU_APP: eazytraining-prod-gitlab
  only:
    - master
  script:
    - apk --no-cache add npm
    - npm install -g heroku@9.3.0
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker tag "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}" registry.heroku.com/${HEROKU_APP}/web
    - heroku container:login
    - docker push registry.heroku.com/${HEROKU_APP}/web
    - heroku stack:set container -a ${HEROKU_APP}
    - heroku container:release web -a ${HEROKU_APP}


deploy review:
  stage: Deploy review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: $REVIEW_ENVIRONMENT_URL
    on_stop: stop review
  only:
    - merge_requests
  variables:
    HEROKU_APP: eazytraining-$CI_COMMIT_REF_SLUG
  script:
    - apk --no-cache add npm jq
    - npm install -g heroku@9.3.0
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
    - docker pull "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}"
    - docker tag "${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}" registry.heroku.com/${HEROKU_APP}/web

    - heroku container:login
    - "[[ ${HEROKU_APP} -gt 31 ]] && echo 'the name of the heroku application you want to create is longer than 30 characters' && exit 1"
    - heroku create $HEROKU_APP  || echo "project already exist"
    - docker push registry.heroku.com/${HEROKU_APP}/web
    - heroku stack:set container -a ${HEROKU_APP}
    - heroku container:release web -a ${HEROKU_APP}

    - REVIEW_ENVIRONMENT_URL=$(heroku info $HEROKU_APP --json | jq -r '.app.web_url')
    - echo "REVIEW_ENVIRONMENT_URL=$REVIEW_ENVIRONMENT_URL" >> deploy.env
  artifacts:
    reports:
      dotenv: deploy.env

 
stop review:
  stage: Stop review
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  variables:
    GIT_STRATEGY: none
    HEROKU_APP: eazytraining-$CI_COMMIT_REF_SLUG
  only:
    - merge_requests
  when: manual
  script:
    - apk --no-cache add npm
    - npm install -g heroku@9.3.0
    - heroku container:login
    - heroku apps:destroy -a $HEROKU_APP -c $HEROKU_APP